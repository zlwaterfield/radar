name: Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js 18
      uses: actions/setup-node@v4
      with:
        node-version: 18
        cache: 'npm'
        cache-dependency-path: app/package-lock.json
    
    - name: Install dependencies
      working-directory: ./app
      run: npm ci
    
    - name: Run linter
      working-directory: ./app
      run: npm run lint
    
    - name: Run unit tests
      working-directory: ./app
      run: npm test
    
    - name: Run tests with coverage
      working-directory: ./app
      run: npm run test:cov
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        directory: ./app/coverage
        fail_ci_if_error: true

  e2e-test:
    runs-on: ubuntu-latest
    needs: test

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: radar_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js 18
      uses: actions/setup-node@v4
      with:
        node-version: 18
        cache: 'npm'
        cache-dependency-path: app/package-lock.json
    
    - name: Install dependencies
      working-directory: ./app
      run: npm ci
    
    - name: Setup test database
      working-directory: ./app
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/radar_test
      run: npx prisma db push
    
    - name: Run e2e tests
      working-directory: ./app
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/radar_test
        NODE_ENV: test
      run: npm run test:e2e