// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Users table - core user authentication and profile data

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Profile data  
  name          String?
  email         String? @unique
  emailVerified Boolean @default(false) @map("email_verified")
  image         String?
  isActive      Boolean @default(true) @map("is_active")

  // Slack integration
  slackId           String?  @unique @map("slack_id")
  slackTeamId       String?  @map("slack_team_id")
  slackBotToken     String?  @map("slack_bot_token") // encrypted - workspace-specific bot token for sending messages
  slackUserToken    String?  @map("slack_user_token") // encrypted - user token (rarely used)
  slackRefreshToken String?  @map("slack_refresh_token") // encrypted

  // GitHub integration  
  githubId            String? @unique @map("github_id")
  githubLogin         String? @unique @map("github_login")
  githubAccessToken   String? @map("github_access_token") // encrypted
  githubRefreshToken  String? @map("github_refresh_token") // encrypted
  githubInstallationId String? @map("github_installation_id")
  teamsLastSyncedAt   DateTime? @map("teams_last_synced_at")

  // Relations
  repositories        UserRepository[]
  notifications       Notification[]
  digestConfigs       DigestConfig[]
  notificationProfiles NotificationProfile[]
  digests             UserDigest[]
  events              Event[]
  sessions            Session[]
  accounts            Account[]
  teams               UserTeam[]

  @@map("user")
}


// User repository relationships

model UserRepository {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // GitHub repository data
  githubId       String  @map("github_id")
  name           String
  fullName       String  @map("full_name")
  description    String? @default("")
  url            String  @default("")
  isPrivate      Boolean @default(false) @map("is_private")
  isFork         Boolean @default(false) @map("is_fork")
  // Owner information
  ownerName      String  @default("") @map("owner_name")
  ownerAvatarUrl String  @default("") @map("owner_avatar_url")
  ownerUrl       String  @default("") @map("owner_url")
  // Repository settings
  organization   String?
  isActive       Boolean @default(true) @map("is_active")
  enabled        Boolean @default(false)

  @@unique([userId, githubId])
  @@map("user_repository")
}

// GitHub events storage

model Event {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Event metadata
  eventType      String  @map("event_type")
  action         String?
  repositoryId   String  @map("repository_id")
  repositoryName String  @map("repository_name")
  senderId       String  @map("sender_id")
  senderLogin    String  @map("sender_login")

  // Processing status
  processed Boolean @default(false)

  // Full GitHub payload (JSON)
  payload Json

  // Relations
  userId        String?        @map("user_id")
  user          User?          @relation(fields: [userId], references: [id])
  notifications Notification[]

  @@map("event")
}

// Notification tracking

model Notification {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  eventId String? @map("event_id")
  event   Event?  @relation(fields: [eventId], references: [id])

  // Slack message details
  messageType String  @map("message_type")
  channel     String?
  messageTs   String? @map("message_ts")
  // Notification payload (JSON)
  payload     Json

  // Notification decision context for debugging
  reason      String? // Main reason for notification (e.g., "KEYWORD_MATCH", "AUTHOR", "REVIEWER")
  context     Json?   // Additional context like watching reasons, matched keywords, etc.

  @@map("notification")
}

// User digest configurations
model DigestConfig {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Basic settings
  name        String
  description String?
  isEnabled   Boolean @default(true) @map("is_enabled")
  
  // Schedule
  digestTime String @map("digest_time") // HH:MM format
  timezone   String @default("UTC")
  daysOfWeek Int[] @default([0, 1, 2, 3, 4, 5, 6]) @map("days_of_week") // 0=Sunday, 6=Saturday
  
  // Scope settings
  scopeType String @map("scope_type") // "user" | "team"
  scopeValue String? @map("scope_value") // null for user, teamId for team
  
  // Repository filtering
  repositoryFilter Json @default("{}") @map("repository_filter") // {type: "all" | "selected", repoIds?: string[]}
  
  // Delivery settings
  deliveryType String @map("delivery_type") // "dm" | "channel"
  deliveryTarget String? @map("delivery_target") // null for DM, channelId for channel
  
  // Relations
  digestHistory UserDigest[]
  
  @@map("digest_config")
}

// Notification profiles - flexible notification configurations
model NotificationProfile {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Basic settings
  name        String
  description String?
  isEnabled   Boolean @default(true) @map("is_enabled")
  
  // Scope settings (same as digests)
  scopeType  String @map("scope_type") // "user" | "team"  
  scopeValue String? @map("scope_value") // null for user, teamId for team
  
  // Repository filtering (same as digests)
  repositoryFilter Json @default("{\"type\": \"all\"}") @map("repository_filter") // {type: "all" | "selected", repoIds?: string[]}
  
  // Delivery settings (same as digests)
  deliveryType   String @map("delivery_type") // "dm" | "channel"
  deliveryTarget String? @map("delivery_target") // null for DM, channelId for channel
  
  // Notification preferences (moved from UserSettings)
  notificationPreferences Json @default("{}") @map("notification_preferences")
  
  // Keywords for this profile
  keywords          String[] @default([])
  keywordLLMEnabled Boolean  @default(true) @map("keyword_llm_enabled")
  
  // Priority for processing order (higher = processed first)
  priority Int @default(0)
  
  @@map("notification_profile")
}

// User digest history

model UserDigest {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  digestConfigId String? @map("digest_config_id")
  digestConfig   DigestConfig? @relation(fields: [digestConfigId], references: [id], onDelete: SetNull)

  // Digest details
  sentAt           DateTime @map("sent_at")
  messageTs        String   @map("message_ts")
  pullRequestCount Int      @default(0) @map("pull_request_count")
  issueCount       Int      @default(0) @map("issue_count")
  
  // Delivery info
  deliveryType   String  @map("delivery_type") // "dm" | "channel"
  deliveryTarget String? @map("delivery_target")

  @@map("user_digest")
}

// Better Auth required tables

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

// User team memberships

model UserTeam {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // GitHub team data
  teamId       String @map("team_id")
  teamSlug     String @map("team_slug")
  teamName     String @map("team_name")
  organization String
  permission   String @default("member")
  enabled      Boolean @default(true)

  @@unique([userId, teamId])
  @@map("user_team")
}
